{"version":3,"sources":["ng://@fabiangosebrink/angular-console-logger/lib/logger.config.ts","ng://@fabiangosebrink/angular-console-logger/lib/angular-console-logger.service.ts","ng://@fabiangosebrink/angular-console-logger/lib/angular-console-logger.component.ts","ng://@fabiangosebrink/angular-console-logger/lib/angular-console-logger.module.ts"],"names":["LoggerConfig","AbstractLoggerService","AngularConsoleLoggerService","loggerConfig","this","prototype","warn","message","isProduction","console","appPrefix","error","info","log","Injectable","args","providedIn","AngularConsoleLoggerComponent","ngOnInit","Component","selector","template","AngularConsoleLoggerModule","forRoot","configuration","ngModule","providers","provide","useValue","NgModule","imports","declarations","exports"],"mappings":"qWAAA,IAAAA,EAAA,SAAAA,QCGA,SAAAC,mBAUE,SAAAC,EAAoBC,GAAAC,KAAAD,aAAAA,SACpBD,EAAAG,UAAAC,KAAA,SAAKC,GACCH,KAAKD,aAAaK,cAGtBC,QAAQH,KAAQF,KAAKD,aAAaO,UAAS,KAAKH,IAElDL,EAAAG,UAAAM,MAAA,SAAMJ,GACJE,QAAQE,MAASP,KAAKD,aAAaO,UAAS,KAAKH,IAEnDL,EAAAG,UAAAO,KAAA,SAAKL,GACCH,KAAKD,aAAaK,cAGtBC,QAAQI,IAAOT,KAAKD,aAAaO,UAAS,KAAKH,wBAlBlDO,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDATLhB,0HCDTiB,EAAA,WAaE,SAAAA,KAKF,OAHEA,EAAAZ,UAAAa,SAAA,iCAbDC,EAAAA,UAASJ,KAAA,CAAC,CACTK,SAAU,6BACVC,SAAU,yGAcZJ,EAlBA,GCAAK,EAAA,WAIA,SAAAA,KAiBA,OAXgBA,EAAAC,QAAd,SAAsBC,GACpB,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT,CACEC,QAAS3B,EACT4B,SAAUJ,0BAZnBK,EAAAA,SAAQd,KAAA,CAAC,CACRe,QAAS,GACTC,aAAc,CAACd,GACfe,QAAS,CAACf,OAcZK,EArBA","sourcesContent":["export class LoggerConfig {\r\n  isProduction: boolean;\r\n  appPrefix: string;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { LoggerConfig } from './logger.config';\n\nexport abstract class AbstractLoggerService {\n  abstract warn(message: string);\n  abstract error(message: string);\n  abstract info(message: string);\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularConsoleLoggerService implements AbstractLoggerService {\n  constructor(private loggerConfig: LoggerConfig) {}\n  warn(message: string) {\n    if (this.loggerConfig.isProduction) {\n      return;\n    }\n    console.warn(`${this.loggerConfig.appPrefix}: ${message}`);\n  }\n  error(message: string) {\n    console.error(`${this.loggerConfig.appPrefix}: ${message}`);\n  }\n  info(message: string) {\n    if (this.loggerConfig.isProduction) {\n      return;\n    }\n    console.log(`${this.loggerConfig.appPrefix}: ${message}`);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-angular-console-logger',\n  template: `\n    <p>\n      angular-console-logger works!\n    </p>\n  `,\n  styles: []\n})\nexport class AngularConsoleLoggerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { AngularConsoleLoggerComponent } from './angular-console-logger.component';\nimport { LoggerConfig } from './logger.config';\n\n@NgModule({\n  imports: [],\n  declarations: [AngularConsoleLoggerComponent],\n  exports: [AngularConsoleLoggerComponent],\n})\nexport class AngularConsoleLoggerModule {\n  public static forRoot(configuration: LoggerConfig): ModuleWithProviders {\n    return {\n      ngModule: AngularConsoleLoggerModule,\n      providers: [\n        {\n          provide: LoggerConfig,\n          useValue: configuration,\n        },\n      ],\n    };\n  }\n}\n"]}